#/bin/bash

shopt -s nullglob

# can't use -Wno_contracts to ignore overlapping domains
DIALYZER_OPTS=" -Wno_improper_lists"

# time limit and memory limit
function limitrun {
  ./timeout -t 10 -s 1000000 $@
}

function result {
  R=$2
  if [ $1 -eq 0 ]; then
    echo "[O] $R" 
  elif [ $1 -eq 1 ]; then
    echo "[X] $R" 
  elif [ $1 -eq 137 ]; then
    echo "[M] $R" 
  elif [ $1 -eq 124 ]; then
    echo "[T] $R" 
  else
    echo "[!] $R" 
  fi
}

function fail {
  R=$2
  if [ $1 -eq 0 ]; then
    echo "[X] $R"
  elif [ $1 -eq 1 ]; then
    echo "[O] $R" 
  elif [ $1 -eq 137 ]; then
    echo "[M] $R" 
  elif [ $1 -eq 124 ]; then
    echo "[T] $R" 
  else
    echo "[!] $R"
  fi
}

function exception {
  echo "[!] $1"
}

function ety {
  limitrun ./ety $1 > /dev/null 2> /dev/null
  R2=$?
  if [ $2 = "fail" ]; then
    fail $R2 $1
  else
    result $R2 $1
  fi
}

# PLT needs to be built before
# ./dialyzer --build_plt --apps erts kernel stdlib mnesia
#./dialyzer --src path/somefile.erl
function cdialyzer {
  dialyzer $DIALYZER_OPTS --src $1 > /dev/null
  R2=$?
  # 2 is the error basically
  # 1 something else is wrong
  if [ $R2 = 2 ]; then
    R2=1
  elif [ $R2 = 1 ]; then
    R2=2
  fi
  if [ $2 = "fail" ]; then
    fail $R2 $1
  else
    result $R2 $1
  fi
}

function gradualizer {
  ./gradualizer $1 > /dev/null 2> /dev/null
  R=$?
  if [ $2 = "fail" ]; then
    fail $R $1
  else
    result $R $1
  fi
}

function eqwalizer {
  # strange exit code conventions
  F=`basename $1`
  F2=${F%.*}
  T=$(mktemp)
  Out=$(./elp eqwalize $F2 2> $T)
  if (echo "$Out" | grep -vq "Exception"); then
    if (echo "$Out" | grep -q "NO ERRORS"); then
      R=0
    else
      R=1
    fi
    if [ $3=="fail" ]; then
      fail $R $1
    else
      result $R $1
    fi
  else
    exception $1
  fi
}


#allModules=(cdialyzer gradualizer eqwalizer ety)
#allModules=(cdialyzer gradualizer ety)
allModules=(ety)


testSuites=(ety gradualizer)

echo ---
echo Testing features: ${allModules[@]}
echo ---

for checkerundertest in ${allModules[@]}; do
  echo $checkerundertest
  for suite in ${testSuites[@]}; do
    for testcase in $suite-src/fail*/*.erl ; do
      ("$checkerundertest" "$testcase" fail) >> "f-$checkerundertest-$suite-fail"
      tail -1 "f-$checkerundertest-$suite-fail"
    done
  done

  for suite in ${testSuites[@]}; do
    for testcase in $suite-src/pass*/*.erl ; do
      ("$checkerundertest" "$testcase" pass) >> "f-$checkerundertest-$suite-pass"
      tail -1 "f-$checkerundertest-$suite-pass"
    done
  done
done

